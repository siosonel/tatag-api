exports.api = function (conf) {		
	var byId = {}, byType = {}, curr={};
	
	function main() {}
	
	function indexGraph(d) {
		if (d[conf._type]) curr[d[conf._type]] = d; //swap current representation

		if (d[conf._id]) {	
			//save typed resrouces in an array
			if (d[conf._type] && !byId[conf._id]) {
				if (!byType[d[conf._type]]) byType[d[conf._type]] = []
				byType[d[conf._type]] = d;
			}
			
			//index by self-url, will swap any existing values at the same url
			byId[d[conf._id]] = d; 
		}
	}
	
	main.loadType = function (type) {
		var url = type==conf.entrance._type
			? conf.entrance.value 
			: byType[conf.entrance._type][type];
		
		if (!byType[type]) return main.loadId(url)
		else {
			var deferred = Q.defer();
			deferred.resolve(byType[type]);
			return deferred.promise;
		}
	}	
	
	main.loadId = function (url, refresh) {
		var deferred = Q.defer();
		
		if (!url) deferred.reject(new Error('No links for resource type:' +type+'.'));
		else if (byId[url] && !refresh) {deferred.resolve(byId[url]); console.log("          (cache:"+url+")");}
		else request.get(url)
			.auth(conf.userid, conf.pass)
			.end(function (err, res) {
				if (err) deferred.reject(new Error(err));
				else if (!res || !res.body) deferred.reject(new Error('No response body.'));
				else {
					if (!res.body['@graph']) { //console.log('type '+type+' '+res.body[conf._type])
						res.body = {'@graph': [res.body]}; //coerce to graph layout
					}
										
					res.body['@graph'].map(indexGraph);
					deferred.resolve(res.body['@graph'][0]);
				}
			});
		
		return deferred.promise;
	}
	
	main.deref = function (links) {
		var promises = [];
		
		for(var rel in links) {
			if (typeof links[rel]=='string') promises.push(main.loadId(links[rel]));
			else {				
				for(var i=0; i<links[rel].length; i++) {promises.push(main.loadId(links[rel][i]));}
			}
		}
		
		return Q.all(promises);
	}
	
	main.request = function (action) {
		var deferred = Q.defer();
		action.method = action.method.toLowerCase();
		
		if (!action) deferred.resolve(null) 
		else request[action.method](action.target)
			.auth(conf.userid, conf.pass)
			.query(action.query)
			.send(action.inputs)
			.end(function (err, res) { 
				if (err) deferred.reject(new Error(err));
				else if (!res || !res.body) deferred.reject(new Error('No response body.'));
				else {
					if (!res.body['@graph']) res.body = {'@graph': [res.body]};									
					res.body['@graph'].map(indexGraph);
					deferred.resolve(res);
				}
			});
				
		return deferred.promise;
	}
	
	main.byId = byId
	main.byType = byType;	
	main.curr = curr
	
	return main;
}